plugins {
	id 'org.springframework.boot' version '2.5.7'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id "com.google.protobuf" version "0.8.18"
	id 'application'
	id 'java'
	id 'com.palantir.docker' version '0.22.1'
}

group = 'io.nuvalence'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	set('testcontainersVersion', "1.16.0")
}

var grpcVersion = '1.42.1'
var javaxAnnotationsVersion = '1.3.2'
var protocVersion = '3.17.3'
dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'org.apache.kafka:kafka-streams'
	implementation 'org.springframework.kafka:spring-kafka'
	implementation("io.grpc:grpc-netty:${grpcVersion}")
	implementation("io.grpc:grpc-protobuf:${grpcVersion}")
	implementation("io.grpc:grpc-stub:${grpcVersion}")

	if (JavaVersion.current().isJava9Compatible()) {
		// Workaround for @javax.annotation.Generated
		// see: https://github.com/grpc/grpc-java/issues/3633
		compileOnly "javax.annotation:javax.annotation-api:${javaxAnnotationsVersion}"
	}
	compileOnly 'org.projectlombok:lombok'

	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'io.projectreactor:reactor-test'
	testImplementation 'org.springframework.kafka:spring-kafka-test'
	testImplementation 'org.testcontainers:junit-jupiter'
	testImplementation 'org.testcontainers:kafka'
}

dependencyManagement {
	imports {
		mavenBom "org.testcontainers:testcontainers-bom:${testcontainersVersion}"
	}
}

docker {
	name "nuvalence/${project.name}:${project.version}"
	dockerfile file('src/main/docker/Dockerfile')
}

protobuf {
	protoc {
		artifact = "com.google.protobuf:protoc:${protocVersion}"
	}
	plugins {
		grpc {
			artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
		}
	}
	generateProtoTasks {
		all()*.plugins {
			grpc {}
		}
		all().each { task ->
			task.builtins {
				python { }
			}
		}
	}
}

sourceSets {
	main {
		proto {
			srcDir("src/main/protobuf")
		}
	}
}

test {
	useJUnitPlatform()
}
